//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

public class RoadPool : MonoBehaviour
{
    //Create object pools for all prefabs. 
    private Queue<GameObject> greenRoadObjectPool;
    [SerializeField] private int greenRoadObjectPoolStartSize = 50;

    private Queue<GameObject> redRoadObjectPool;
    [SerializeField] private int redRoadObjectPoolStartSize = 50;

    private Queue<GameObject> roadObjectPool;
    [SerializeField] private int roadObjectPoolStartSize = 150;

    [SerializeField] GameObject greenPrefab = null;
	[SerializeField] GameObject redPrefab = null;
	[SerializeField] GameObject actualRoadPrefab = null;
	private ScenarioMgr scenario;
    public static Vector3 roadOffset = new Vector3(0.5f, 0.01f, 0.5f);


	void Start()
	{
		scenario = gameObject.GetComponent("ScenarioMgr") as ScenarioMgr;

        //Create and setup object pools.
        greenRoadObjectPool = new Queue<GameObject>();
        SetupObjectPool(greenRoadObjectPool, greenRoadObjectPoolStartSize, greenPrefab);

        redRoadObjectPool = new Queue<GameObject>();
        SetupObjectPool(redRoadObjectPool, redRoadObjectPoolStartSize, redPrefab);

        roadObjectPool = new Queue<GameObject>();
        SetupObjectPool(roadObjectPool, roadObjectPoolStartSize, actualRoadPrefab);
    }

    private void SetupObjectPool(Queue<GameObject> objectPool, int objectPoolStartSize, GameObject objectTypePrefab)
    {
        for (int i = 0; i < objectPoolStartSize; i++)
        {
            GameObject citizen = (GameObject)Instantiate(objectTypePrefab);
            citizen.SetActive(false);
            objectPool.Enqueue(citizen);
        }
    }


    public GameObject GetGreenGhost (IntPoint2D tileLoc)
	{
		GameObject tile = this.CreateRoadTile (greenRoadObjectPool, greenPrefab, tileLoc);
		tile.SetActive (true);
		return tile;
	}

    public void DeactivateGreenRoad(GameObject road)
    {
        road.SetActive(false);
        greenRoadObjectPool.Enqueue(road);
    }

	public GameObject GetRedGhost (IntPoint2D tileLoc)
	{
		GameObject tile = this.CreateRoadTile ( redRoadObjectPool, redPrefab, tileLoc);
		tile.SetActive (true);
		return tile;
	}

    public void DeactivateRedRoad(GameObject road)
    {
        road.SetActive(false);
        redRoadObjectPool.Enqueue(road);
    }

    public GameObject GetActualTile (IntPoint2D tileLoc)
	{
		GameObject tile = this.CreateRoadTile (roadObjectPool, actualRoadPrefab, tileLoc);
		tile.SetActive (true);
		return tile;
	}

    public void DeactivateRoad(GameObject road)
    {
        road.SetActive(false);
        roadObjectPool.Enqueue(road);
    }


    private GameObject CreateRoadTile (Queue<GameObject> roadTypeObjectPool, GameObject prefabRoad, IntPoint2D tileIndex)
	{
		Vector3 roadPoint = scenario.ComputeTopLeftPointOfTile (tileIndex);
		//Debug.Log("Creating a road Tile at");
		//Debug.Log (roadPoint);

        GameObject road = CheckObjectPool(roadTypeObjectPool, prefabRoad);
		//GameObject road = (GameObject)Instantiate (prefabRoad);
		road.transform.position = roadPoint + roadOffset;

        //Debug.Log(road.transform.position);
			
		return road;
	}

    private GameObject CheckObjectPool(Queue<GameObject> objectPool, GameObject roadTypePrefab)
    {
        GameObject road;

        if (objectPool.Count == 0)
        {
            //Not enough guys in object pool. Make another. Make 50 more.
            for (int i = 0; i < 50; i++)
            {
                road = (GameObject)Instantiate(roadTypePrefab);
                road.SetActive(false);
                objectPool.Enqueue(road);
            }
        }
        road = objectPool.Dequeue();
        
        return road;
    }
}

